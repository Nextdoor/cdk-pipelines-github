// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`can set pre/post github action job step 1`] = `
"# AUTOMATICALLY GENERATED FILE, DO NOT EDIT MANUALLY.
# Generated by AWS CDK and [cdk-pipelines-github](https://github.com/cdklabs/cdk-pipelines-github)

name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  Build-Synth:
    name: Synthesize
    if: contains(fromJson('[\\"push\\", \\"pull_request\\"]'), github.event_name)
    permissions:
      contents: read
      id-token: none
    runs-on: ubuntu-latest
    needs: []
    env: {}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install
        run: yarn
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build
        run: yarn build
      - name: Package cdk.out
        run: tar -zcf cdk.out.tgz stage.out
      - name: Upload cdk.out
        uses: actions/upload-artifact@v3
        with:
          name: cdk.out
          path: cdk.out.tgz
          retention-days: 1
          if-no-files-found: error
  MyPrePostStack-PreDeployAction:
    name: PreDeployAction
    if: contains(fromJson('[\\"push\\", \\"pull_request\\"]'), github.event_name)
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs:
      - Build-Synth
    env: {}
    steps:
      - name: pre deploy action
        uses: my-pre-deploy-action@1.0.0
        with:
          app-id: 1234
          secrets: my-secrets
  MyPrePostStack-MyStack-Deploy:
    name: Deploy MyPrePostStack/MyStack
    if: success() && contains(github.event.issue.labels.*.name, 'deploy')
    permissions:
      contents: read
      id-token: none
    needs:
      - Build-Synth
      - MyPrePostStack-PreDeployAction
    runs-on: ubuntu-latest
    steps:
      - name: Download cdk.out
        uses: actions/download-artifact@v3
        with:
          name: cdk.out
      - name: Unpackage cdk.out
        run: tar -zxf cdk.out.tgz
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - id: Deploy
        run: npx cdk --app stage.out deploy MyPrePostStack/MyStack
          --require-approval=never --exclusively
  MyPrePostStack-PostDeployAction:
    name: PostDeployAction
    if: contains(fromJson('[\\"push\\", \\"pull_request\\"]'), github.event_name)
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs:
      - MyPrePostStack-MyStack-Deploy
      - Build-Synth
    env: {}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: post deploy action
        uses: my-post-deploy-action@1.0.0
        with:
          app-id: 4321
          secrets: secrets
"
`;

exports[`cloudformation stack capabilities can specify multiple capabilities 1`] = `
"# AUTOMATICALLY GENERATED FILE, DO NOT EDIT MANUALLY.
# Generated by AWS CDK and [cdk-pipelines-github](https://github.com/cdklabs/cdk-pipelines-github)

name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  Build-Build:
    name: Synthesize
    permissions:
      contents: read
      id-token: none
    runs-on: ubuntu-latest
    needs: []
    env: {}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install
        run: yarn
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build
        run: yarn build
      - name: Package cdk.out
        run: tar -zcf cdk.out.tgz stage.out
      - name: Upload cdk.out
        uses: actions/upload-artifact@v3
        with:
          name: cdk.out
          path: cdk.out.tgz
          retention-days: 1
          if-no-files-found: error
  MyStack-MyStack-Deploy:
    name: Deploy MyStack/MyStack
    permissions:
      contents: read
      id-token: none
    needs:
      - Build-Build
    runs-on: ubuntu-latest
    steps:
      - name: Download cdk.out
        uses: actions/download-artifact@v3
        with:
          name: cdk.out
      - name: Unpackage cdk.out
        run: tar -zxf cdk.out.tgz
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - id: Deploy
        run: npx cdk --app stage.out deploy MyStack/MyStack --require-approval=never
          --exclusively
"
`;

exports[`cloudformation stack capabilities can specify stack capabilities 1`] = `
"# AUTOMATICALLY GENERATED FILE, DO NOT EDIT MANUALLY.
# Generated by AWS CDK and [cdk-pipelines-github](https://github.com/cdklabs/cdk-pipelines-github)

name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  Build-Build:
    name: Synthesize
    permissions:
      contents: read
      id-token: none
    runs-on: ubuntu-latest
    needs: []
    env: {}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install
        run: yarn
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build
        run: yarn build
      - name: Package cdk.out
        run: tar -zcf cdk.out.tgz stage.out
      - name: Upload cdk.out
        uses: actions/upload-artifact@v3
        with:
          name: cdk.out
          path: cdk.out.tgz
          retention-days: 1
          if-no-files-found: error
  MyStack-MyStack-Deploy:
    name: Deploy MyStack/MyStack
    permissions:
      contents: read
      id-token: none
    needs:
      - Build-Build
    runs-on: ubuntu-latest
    steps:
      - name: Download cdk.out
        uses: actions/download-artifact@v3
        with:
          name: cdk.out
      - name: Unpackage cdk.out
        run: tar -zxf cdk.out.tgz
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - id: Deploy
        run: npx cdk --app stage.out deploy MyStack/MyStack --require-approval=never
          --exclusively
"
`;

exports[`github environment can specify multiple github environments 1`] = `
"# AUTOMATICALLY GENERATED FILE, DO NOT EDIT MANUALLY.
# Generated by AWS CDK and [cdk-pipelines-github](https://github.com/cdklabs/cdk-pipelines-github)

name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  Build-Build:
    name: Synthesize
    permissions:
      contents: read
      id-token: none
    runs-on: ubuntu-latest
    needs: []
    env: {}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install
        run: yarn
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build
        run: yarn build
      - name: Package cdk.out
        run: tar -zcf cdk.out.tgz stage.out
      - name: Upload cdk.out
        uses: actions/upload-artifact@v3
        with:
          name: cdk.out
          path: cdk.out.tgz
          retention-days: 1
          if-no-files-found: error
  MyStage1-MyStack-Deploy:
    name: Deploy MyStage1/MyStack
    permissions:
      contents: read
      id-token: none
    environment: test
    needs:
      - Build-Build
    runs-on: ubuntu-latest
    steps:
      - name: Download cdk.out
        uses: actions/download-artifact@v3
        with:
          name: cdk.out
      - name: Unpackage cdk.out
        run: tar -zxf cdk.out.tgz
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - id: Deploy
        run: npx cdk --app stage.out deploy MyStage1/MyStack --require-approval=never
          --exclusively
  MyStage2-MyStack-Deploy:
    name: Deploy MyStage2/MyStack
    permissions:
      contents: read
      id-token: none
    environment: prod
    needs:
      - Build-Build
      - MyStage1-MyStack-Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Download cdk.out
        uses: actions/download-artifact@v3
        with:
          name: cdk.out
      - name: Unpackage cdk.out
        run: tar -zxf cdk.out.tgz
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-west-2
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - id: Deploy
        run: npx cdk --app stage.out deploy MyStage2/MyStack --require-approval=never
          --exclusively
"
`;

exports[`github stages in waves works 1`] = `
"# AUTOMATICALLY GENERATED FILE, DO NOT EDIT MANUALLY.
# Generated by AWS CDK and [cdk-pipelines-github](https://github.com/cdklabs/cdk-pipelines-github)

name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  Build-Build:
    name: Synthesize
    if: contains(github.event.issue.labels.*.name, 'deployToA') ||
      contains(github.event.issue.labels.*.name, 'deployToB')
    permissions:
      contents: read
      id-token: none
    runs-on: ubuntu-latest
    needs: []
    env: {}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install
        run: yarn
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build
        run: yarn build
      - name: Package cdk.out
        run: tar -zcf cdk.out.tgz stage.out
      - name: Upload cdk.out
        uses: actions/upload-artifact@v3
        with:
          name: cdk.out
          path: cdk.out.tgz
          retention-days: 1
          if-no-files-found: error
  MyWave-PreWaveAction:
    name: PreWaveAction
    if: contains(github.event.issue.labels.*.name, 'deployToA') ||
      contains(github.event.issue.labels.*.name, 'deployToB')
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs:
      - Build-Build
    env: {}
    steps:
      - name: pre wave action
        uses: my-pre-wave-action@1.0.0
        with:
          app-id: 1234
          secrets: my-secrets
  MyWave-MyStageA-MyStackA-Deploy:
    name: Deploy MyStageA/MyStackA
    if: success() && contains(github.event.issue.labels.*.name, 'deployToA')
    permissions:
      contents: read
      id-token: none
    needs:
      - Build-Build
      - MyWave-PreWaveAction
    runs-on: ubuntu-latest
    steps:
      - name: Download cdk.out
        uses: actions/download-artifact@v3
        with:
          name: cdk.out
      - name: Unpackage cdk.out
        run: tar -zxf cdk.out.tgz
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - id: Deploy
        run: npx cdk --app stage.out deploy MyStageA/MyStackA --require-approval=never
          --exclusively
  MyWave-MyStageB-MyStackB-Deploy:
    name: Deploy MyStageB/MyStackB
    if: success() && contains(github.event.issue.labels.*.name, 'deployToB')
    permissions:
      contents: read
      id-token: none
    needs:
      - Build-Build
      - MyWave-PreWaveAction
    runs-on: ubuntu-latest
    steps:
      - name: Download cdk.out
        uses: actions/download-artifact@v3
        with:
          name: cdk.out
      - name: Unpackage cdk.out
        run: tar -zxf cdk.out.tgz
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - id: Deploy
        run: npx cdk --app stage.out deploy MyStageB/MyStackB --require-approval=never
          --exclusively
  MyWave-PostWaveAction:
    name: PostWaveAction
    if: contains(github.event.issue.labels.*.name, 'deployToA') ||
      contains(github.event.issue.labels.*.name, 'deployToB')
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs:
      - MyWave-MyStageA-MyStackA-Deploy
      - MyWave-MyStageB-MyStackB-Deploy
      - Build-Build
    env: {}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: post wave action
        uses: my-post-wave-action@1.0.0
        with:
          app-id: 4321
          secrets: secrets
"
`;

exports[`job settings can specify job settings at stage level 1`] = `
"# AUTOMATICALLY GENERATED FILE, DO NOT EDIT MANUALLY.
# Generated by AWS CDK and [cdk-pipelines-github](https://github.com/cdklabs/cdk-pipelines-github)

name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  Build-Build:
    name: Synthesize
    permissions:
      contents: read
      id-token: none
    runs-on: ubuntu-latest
    needs: []
    env: {}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install
        run: yarn
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build
        run: yarn build
      - name: Package cdk.out
        run: tar -zcf cdk.out.tgz stage.out
      - name: Upload cdk.out
        uses: actions/upload-artifact@v3
        with:
          name: cdk.out
          path: cdk.out.tgz
          retention-days: 1
          if-no-files-found: error
  MyStack-MyStack-Deploy:
    name: Deploy MyStack/MyStack
    if: github.repository == 'github/repo'
    permissions:
      contents: read
      id-token: none
    needs:
      - Build-Build
    runs-on: ubuntu-latest
    steps:
      - name: Download cdk.out
        uses: actions/download-artifact@v3
        with:
          name: cdk.out
      - name: Unpackage cdk.out
        run: tar -zxf cdk.out.tgz
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - id: Deploy
        run: npx cdk --app stage.out deploy MyStack/MyStack --require-approval=never
          --exclusively
"
`;

exports[`stages in github waves works 1`] = `
"# AUTOMATICALLY GENERATED FILE, DO NOT EDIT MANUALLY.
# Generated by AWS CDK and [cdk-pipelines-github](https://github.com/cdklabs/cdk-pipelines-github)

name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  Build-Build:
    name: Synthesize
    permissions:
      contents: read
      id-token: none
    runs-on: ubuntu-latest
    needs: []
    env: {}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install
        run: yarn
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build
        run: yarn build
      - name: Package cdk.out
        run: tar -zcf cdk.out.tgz stage.out
      - name: Upload cdk.out
        uses: actions/upload-artifact@v3
        with:
          name: cdk.out
          path: cdk.out.tgz
          retention-days: 1
          if-no-files-found: error
  MyWave-MyStageA-MyStackA-Deploy:
    name: Deploy MyStageA/MyStackA
    if: success() && contains(github.event.issue.labels.*.name, 'deployToA')
    permissions:
      contents: read
      id-token: none
    needs:
      - Build-Build
    runs-on: ubuntu-latest
    steps:
      - name: Download cdk.out
        uses: actions/download-artifact@v3
        with:
          name: cdk.out
      - name: Unpackage cdk.out
        run: tar -zxf cdk.out.tgz
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - id: Deploy
        run: npx cdk --app stage.out deploy MyStageA/MyStackA --require-approval=never
          --exclusively
  MyWave-MyStageB-MyStackB-Deploy:
    name: Deploy MyStageB/MyStackB
    if: success() && contains(github.event.issue.labels.*.name, 'deployToB')
    permissions:
      contents: read
      id-token: none
    needs:
      - Build-Build
    runs-on: ubuntu-latest
    steps:
      - name: Download cdk.out
        uses: actions/download-artifact@v3
        with:
          name: cdk.out
      - name: Unpackage cdk.out
        run: tar -zxf cdk.out.tgz
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - id: Deploy
        run: npx cdk --app stage.out deploy MyStageB/MyStackB --require-approval=never
          --exclusively
"
`;

exports[`stages in pipeline works with \`if\` 1`] = `
"# AUTOMATICALLY GENERATED FILE, DO NOT EDIT MANUALLY.
# Generated by AWS CDK and [cdk-pipelines-github](https://github.com/cdklabs/cdk-pipelines-github)

name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  Build-Build:
    name: Synthesize
    permissions:
      contents: read
      id-token: none
    runs-on: ubuntu-latest
    needs: []
    env: {}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install
        run: yarn
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build
        run: yarn build
      - name: Package cdk.out
        run: tar -zcf cdk.out.tgz stage.out
      - name: Upload cdk.out
        uses: actions/upload-artifact@v3
        with:
          name: cdk.out
          path: cdk.out.tgz
          retention-days: 1
          if-no-files-found: error
  MyStageA-MyStackA-Deploy:
    name: Deploy MyStageA/MyStackA
    if: success() && contains(github.event.issue.labels.*.name, 'deployToA')
    permissions:
      contents: read
      id-token: none
    needs:
      - Build-Build
    runs-on: ubuntu-latest
    steps:
      - name: Download cdk.out
        uses: actions/download-artifact@v3
        with:
          name: cdk.out
      - name: Unpackage cdk.out
        run: tar -zxf cdk.out.tgz
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - id: Deploy
        run: npx cdk --app stage.out deploy MyStageA/MyStackA --require-approval=never
          --exclusively
  MyStageB-MyStackB-Deploy:
    name: Deploy MyStageB/MyStackB
    if: success() && contains(github.event.issue.labels.*.name, 'deployToB')
    permissions:
      contents: read
      id-token: none
    needs:
      - Build-Build
      - MyStageA-MyStackA-Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Download cdk.out
        uses: actions/download-artifact@v3
        with:
          name: cdk.out
      - name: Unpackage cdk.out
        run: tar -zxf cdk.out.tgz
      - name: Authenticate Via GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - id: Deploy
        run: npx cdk --app stage.out deploy MyStageB/MyStackB --require-approval=never
          --exclusively
"
`;
